#ifndef $UOMM
#define $UOMM 0

#include<bl/iuom>
#include<bl/uom>
#include<bl/iuommanager>


#include<iostream>
using namespace std;
namespace inventory
{
 namespace businessLayer
 {
  class UnitOfMeasurementTitleComparator
  {
   public:
   bool operator()(string *left, string *right);
  };
  class _UnitOfMeasurement
  {
   public:
   int code;
   string* title;
  };
  class UnitOfMeasurementManager:public abc::IUnitOfMeasurementManager
  {
   private:
   class DataModel
   {
    public:
    map<int,_UnitOfMeasurement*> codeWiseMap;
    map<string*,_UnitOfMeasurement*,UnitOfMeasurementTitleComparator> titleWiseMap;
    DataModel();
    ~DataModel();
    void populateDataStructures();
   };

   static DataModel dataModel;
   public:
   UnitOfMeasurementManager();
   void addUnitOfMeasurement(abc::IUnitOfMeasurement *unitOfMeasurement);
   void updateUnitOfMeasurement(abc::IUnitOfMeasurement *unitOfMeasurement);
   void removeUnitOfMeasurementByCode(int code);
   void removeUnitOfMeasurementByTitle(string title);
   abc::IUnitOfMeasurement * getUnitOfMeasurementByCode(int code);
   abc::IUnitOfMeasurement * getUnitOfMeasurementByTitle(string title);
   forward_list<abc::IUnitOfMeasurement*>* getUnitOfMeasurements();
   int codeExists(int code);
   int titleExists(string title);
   int getUnitOfMeasurementCount();  
  };
 }
}



#endif